@use "sass:math";
@use "sass:color";

/// a function to calculate the size multiplier of an element
/// ```scss
/// text {
///     font-size: multiplier(2);
///     .child-element {
///             font-size: multiplier(1);
///     }
/// ```
@function multiplier($exponent: 1) {
	@return math.pow(1.6, $exponent);
}

$primary: #60b450;
$secondary: #33642b;
$tertiary: #427676;
$white: #ecf1ed;
$black: #140300;

/// colours for messages for the user
$status-colours: (
	success: green,
	warning: orange,
	error: red,
);

/// values to calculate the multiplier
$sizes: (
	large: 3,
	medium: 2,
	small: 1,
);

/// makes a few utility classes, medium-error, large-warning, and small-success
@each $status, $colour in $status-colours {
	@each $size, $value in $sizes {
		.#{$size}-#{$status} {
			color: $colour;
			font-size: 1rem * multiplier($value);
			text-transform: capitalize;
			font-family: monospace;
		}
	}
}

/// #region mixins
@mixin button($size, $colour, $background-colour) {
	display: flex;
	justify-content: center;
	align-items: center;
	
	border: $colour $size * 0.05 solid;
	border-radius: $size * 0.5;

	width: $size * 0.9;

	padding: $size * 0.05; 

	color: $colour;
	background-color: $background-colour;

	animation: scale 0.1s ease-out;

	/* feedback on hover */
	&:hover,
	&:focus-within,
	&:active {
		cursor: pointer;
		filter: brightness(80%)
	}

	/* feedback when clicked */
	&:not(:active) {
		animation-name: none;
	}

	@keyframes scale {
		to {
			scale: 0.6;
		}
	}
}

/// #endregion mixins

/* imports the font for the title on the home screen */
@import url('https://fonts.googleapis.com/css2?family=Birthstone&display=swap');

// /* styles for the whole document */
// :root {
//         /* sets the document to have dynamic light dark mode based on the clients device settings */
//         /* to use, place two colours in the function light-dark(light-mode-colour, dark-mode-colour) */
//         color-scheme: light dark;
// }

/* set animation for everything to phase in on load */
@keyframes phase-in {
	from {
		opacity: 0;
		filter: blur(5rem);
	}
	to {
		opacity: 1;
		filter: none;
	}
}

/* basic styles for everything */
* {
	outline: none;
	animation: phase-in 0.2s ease-out;
}

/* basic style on body */
body {
	margin: 0;
	padding: 0;

	height: fit-content;

	/* hides content off screen */
	* {
		overflow: hidden;
	}
}

/* basic styles for main and sections */
main {
	section {
		/* to keep some padding from the side of the screen after taking it from the body */
		padding: 1rem;
		padding-top: 10rem;
	}
}

/* basic styles for all anchor tags */
a {
	color: unset;
	text-decoration: unset;
}

/* styles for all user forms */
form {
	display: flex;
	flex-direction: column;
	gap: 3rem;

	.label {
		text-transform: capitalize;
		
		&::after {
			margin-left: 0.1rem;
			content: ':';
		}		
	}

	input {
		border-radius: 0.8rem;
		padding: 0.4rem;
		border-color: $primary;

		background-color: transparent;

		&:focus-within {
			outline: $tertiary solid 0.2rem;
		}
	}
}

.primary-button {
	@include button(10rem, $white, $primary);
	border-color: $primary;
}

.secondary-button {
	@include button(10rem, $primary, transparent)
}

.delete-button {
	@include button(10rem, red, transparent)
}

/* use for debugging styles */
// * {
// border: red solid 1px;
// }

/* styles for the navbar */
.navbar {
	/// for the amount of white space
	$space: 0.4rem;

	/// the width of the navbar
	$width: 90;

	/// height of the navbar
	$height: 5rem;

	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	align-items: center;

	/* keeps the navbar at the top of the screen */
	position: fixed;
	top: $height * 0.5;

	/* centers the navbar at the top */
	left: (100 - $width) * 0.5 * 1vw;

	width: $width * 1vw;
	height: fit-content;

	gap: $space * multiplier(2);

	padding: 0  $height * 0.5;

	background-color: $secondary;

	border: none;
	border-radius: $height;

	/* to appear above everything */
	z-index: 1;

	* {
		margin: 0;
	}

	.logo {
		filter: invert(1);
		max-height: 5rem;
	}

	.links {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;

		/* centers the links */
		align-items: center;
		justify-content: center;

		/* tells it to take up the most possible */
		flex-grow: 1;

		font-size: $height * multiplier(-3);

		gap: $height * multiplier(0);

		a {
			color: $white;
			text-transform: uppercase;
			text-decoration: none;

			/* using these 3 classes to have friendly mobile, desktop, and keyboard navigation styles */
			&:hover,
			&:active,
			&:focus-visible {
				text-decoration: underline;
			}
		}
	}

	.login-button {
		@include button($height * 1.5, transparent, $primary);

		.login-link {
			color: $black;
			background-color: transparent;
		}
	}
}

main.home {
	section.title {
		background-color: $primary;

		/* min height of 60% of the screen view height when the top url bar is or isn't visible */
		min-height: 60dvh;

		width: 100%;

		display: flex;
		flex-direction: column;

		.title-text {
			align-self: flex-start;
			
			margin: 0;
			padding: 0;
			
			color: $white;
			/* sets a min width, reactive width, and max width  */
			font-size: min(20rem, 60vw);
			
			
			font-family: "Birthstone", cursive;
		}

		.splash-text {
			color: $white;
			font-family: monospace;
			align-self: center;

			font-size: 2.5rem;
		}
	}

	.news {
		$spacer: 5rem;

		background-color: $white;
		padding: $spacer * multiplier(-1);
		display: flex;
		flex-direction: column;
		gap: $spacer * multiplier(0);
		width: 100%;
		
		.article {
			background-color: $secondary;
			
			border-radius: $spacer * multiplier(-1);

			max-width: 60%;

			padding: $spacer * multiplier(-2);

			display: flex;
			flex-direction: column;
			gap: $spacer * multiplier(-3);

			&:nth-child(even) {
				align-self: flex-end;
			}
			
			&:nth-child(odd) {
				align-self: flex-start;
			}

			* {
				color: $white;
				padding: 0;
				margin: 0;
			}

			h2.title {
				background-color: transparent;
				text-decoration: underline;
				color: $white;
				font-weight: bolder;
				font-size: $spacer * multiplier(-2);
			}

			.content {
				color: color.adjust($white, $lightness: -5%);
				font-size: $spacer * multiplier(-3);
			}

			.call-to-action {
				@include button($spacer * multiplier(1), $black, $primary);
				max-width: 60%;

				font-size: $spacer * multiplier(-3);

				border-color: transparent;
			}
		}
	}
}

main.login {
	.login-form {
		/// the width of all elements in sub
		$element-width: 30rem;
		
		input {
			width: $element-width;
		}

		div {
			gap: 1rem * multiplier(-1);
			display: flex;
			flex-direction: column;
		}

		.secondary-button,
		.primary-button {
			width: $element-width
		}
	}
}

main.consolations {
	.bookings {
		display: flex;
		flex-direction: column;
		gap: 1rem * multiplier(1);
		
		margin: 1rem;
		margin-top: 10rem;

		border-radius: 2rem * multiplier(1);

		padding: 1rem * multiplier(1);
		
		background-color: $secondary;
		width: 80%;
		min-width: 50rem;

		.booking {
			border-radius: 1rem * multiplier(1);
			
			background-color: $primary;

			padding: 1rem * multiplier(-0.5);

			.options {
				display: inline-flex;
				flex-direction: row;
				gap: 1rem;
			}
		}
	}
}

main.book {
	.create-booking {
		.create-booking {
			.system,
			.date,
			.email,
			.address {
				display: flex;
				flex-direction: column;
			}
		}
	}
}

main.calculation {
	// <div class="calculator">
	// <div class="question">
	// <h2 class="number">1
	// </h2>
	// <h2 class="title">what type of car do you drive?
	// </h2>
	// <h2 class="percent-marker">0
	// </h2>
	// </div>
	// <div class="answers">
	// <button type="button" class="answer">small petrol car
	// </button>
	// <button type="button" class="answer">family petrol car
	// </button>
	// <button type="button" class="answer">diesel
	// </button>
	// <button type="button" class="answer">electric
	// </button>
	// <button type="button" class="answer">hydrogen
	// </button>
	// <button type="button" class="answer">N/A
	// </button>
	// </div>
	// </div>

	padding: 0.5rem;
	display: flex;
	justify-content: center;
	align-items: center;

	.calculator {
		display: flex;
		flex-direction: column;

		border-radius: 3rem;
		padding: 2rem;

		gap: 2rem * multiplier(-1);

		width: 100%;

		background-color: $secondary;
		
		.question {
			display: flex;
			flex-direction: row;
			flex-wrap: wrap;

			padding: 2rem * multiplier(-2);

			gap: 2rem * multiplier(0);

			background-color: $tertiary;

			width: 100%;

			border-radius: 1rem;
			
			/* set all all text to be black */
			* {
				color: $black;
			}

			.number {
				&::before {
					content: 'No. ';
				}
			}

			.title {
				flex-grow: 1;

				/* sets all letters to lowercase in the question */
				text-transform: lowercase;

				/* sets the first letter back to being uppercase to capitalise the sentence */
				&::first-letter {
					text-transform: uppercase;
				}
			}

			.percent-marker {
				&::after {
					content: '%';
				}
			}
		}

		.answers {
			display: flex;
			flex-direction: row;
			flex-wrap: wrap;
			gap: 30%;

			align-items: center;

			.answer {
				/* styles to make a button */
				@include button(10rem, $black, $primary);
				border-color: $primary;
				margin: 1rem;
			}
		}
	}
}
